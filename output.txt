

===== Q:\ZED\ZedBitBucket\jobboard\app\globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  body {
    @apply bg-slate-50 text-slate-900;
  }
}
@layer components {
  .card-subtle {
    @apply bg-white border border-slate-200/60 shadow-sm;
  }
  
  .btn-primary {
    @apply bg-slate-800 text-white px-6 py-2.5 text-sm font-medium;
  }
  
  .btn-secondary {
    @apply border border-slate-300 text-slate-700 px-6 py-2.5 text-sm font-medium;
  }
  
  .btn-accent {
    @apply bg-emerald-600 text-white px-6 py-2.5 text-sm font-medium;
  }
  
  .input-field {
    @apply w-full p-3 border border-slate-300 text-sm focus:outline-none focus:border-emerald-500 focus:ring-1 focus:ring-emerald-500/20;
  }
  
  .nav-link {
    @apply text-slate-600 font-medium;
  }
  
  .job-type-badge {
    @apply text-xs text-emerald-700 bg-emerald-50 px-2.5 py-1 rounded-full uppercase tracking-wide font-medium;
  }
  
  .salary-badge {
    @apply text-sm text-slate-700 bg-slate-100 px-2.5 py-1 rounded-full font-medium;
  }
}


===== Q:\ZED\ZedBitBucket\jobboard\app\layout.tsx =====
import './globals.css'
import { Inter } from 'next/font/google'
import Link from 'next/link'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Monica HR - Find Your Next Opportunity',
  description: 'Premier job board and HR services platform',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <nav className="bg-white border-b border-slate-200/60 sticky top-0 z-50">
          <div className="max-w-6xl mx-auto px-4">
            <div className="flex justify-between items-center h-16">
              <Link href="/" className="text-xl font-semibold text-slate-900 tracking-tight">
                Monica <span className="text-emerald-600">HR</span>
              </Link>
              <div className="flex space-x-8">
                <Link href="/" className="nav-link">
                  Jobs
                </Link>
                <Link href="/post-job" className="nav-link">
                  Post Job
                </Link>
                <Link href="/services" className="nav-link">
                  Services
                </Link>
              </div>
            </div>
          </div>
        </nav>
        
        <main className="max-w-6xl mx-auto px-4 py-12">
          {children}
        </main>
        
        <footer className="border-t border-slate-200/60 mt-24 bg-slate-50/50">
          <div className="max-w-6xl mx-auto px-4 py-8">
            <p className="text-center text-slate-500 text-sm">
              © 2024 Monica HR. All rights reserved.
            </p>
          </div>
        </footer>
      </body>
    </html>
  )
}


===== Q:\ZED\ZedBitBucket\jobboard\app\not-found.tsx =====
import Link from 'next/link'

export default function NotFound() {
  return (
    <div className="text-center py-12 space-y-4">
      <h1 className="text-4xl font-light text-gray-900">404</h1>
      <p className="text-gray-600">The page you're looking for doesn't exist.</p>
      <Link 
        href="/" 
        className="inline-block bg-gray-900 text-white px-6 py-2 text-sm hover:bg-gray-800 transition-colors"
      >
        Go Home
      </Link>
    </div>
  )
}



===== Q:\ZED\ZedBitBucket\jobboard\app\page.tsx =====
import Link from 'next/link'
import { getJobs } from '@/lib/jobs'

export default function Home() {
  const jobs = getJobs();
  
  return (
    <div className="space-y-16">
      {/* Hero Section */}
      <div className="text-center space-y-6">
        <div className="space-y-4">
          <h1 className="text-4xl font-light text-slate-900 tracking-tight">
            Find Your Next <span className="text-emerald-600 font-medium">Opportunity</span>
          </h1>
          <p className="text-lg text-slate-600 max-w-2xl mx-auto leading-relaxed">
            Connecting talent with opportunity across Africa
          </p>
        </div>
        <div className="flex justify-center space-x-4 pt-6">
          <Link 
            href="/post-job"
            className="btn-primary"
          >
            Post a Job
          </Link>
          <Link 
            href="/services"
            className="btn-secondary"
          >
            HR Services
          </Link>
        </div>
      </div>
      
      {/* Jobs Section */}
      <div className="space-y-8">
        <div className="flex items-center justify-between">
          <h2 className="text-2xl font-light text-slate-900">Latest Jobs</h2>
          <div className="h-px bg-gradient-to-r from-emerald-200 to-transparent flex-1 ml-8"></div>
        </div>
        
        <div className="grid gap-6">
          {jobs.map((job) => (
            <Link 
              key={job.id} 
              href={`/jobs/${job.id}`}
              className="card-subtle p-6 block"
            >
              <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-4">
                {/* Left side - Job details */}
                <div className="space-y-3 flex-1">
                  <div className="flex items-start gap-3">
                    <div className="w-12 h-12 rounded-md bg-slate-100 flex items-center justify-center text-slate-400">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                      </svg>
                    </div>
                    <div>
                      <h3 className="text-lg font-medium text-slate-900">
                        {job.title}
                      </h3>
                      <p className="text-emerald-600 font-medium">{job.company}</p>
                    </div>
                  </div>
                  
                  <p className="text-slate-700 text-sm line-clamp-2 leading-relaxed">
                    {job.description}
                  </p>
                </div>
                
                {/* Right side - Meta info */}
                <div className="space-y-3 sm:text-right">
                  <div className="flex flex-wrap gap-2 sm:justify-end">
                    <span className="job-type-badge">
                      {job.type.replace('-', ' ')}
                    </span>
                    {job.salary && (
                      <span className="salary-badge">
                        {job.salary}
                      </span>
                    )}
                  </div>
                  
                  <div className="space-y-1">
                    <p className="text-slate-600 text-sm">{job.location}</p>
                    <p className="text-slate-400 text-xs">
                      Posted {job.postedAt.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                    </p>
                  </div>
                </div>
              </div>
            </Link>
          ))}
        </div>
      </div>
    </div>
  )
}


===== Q:\ZED\ZedBitBucket\jobboard\app\jobs\[id]\page.tsx =====
// app/jobs/[id]/page.tsx
import { getJobById } from '@/lib/jobs'
import { notFound } from 'next/navigation'
import Link from 'next/link'

export default function JobDetail({ params }: { params: { id: string } }) {
  const job = getJobById(params.id);
  
  if (!job) {
    notFound();
  }

  return (
    <div className="max-w-3xl mx-auto space-y-6">
      <Link 
        href="/" 
        className="inline-flex items-center text-slate-600 text-sm font-medium"
      >
        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
        </svg>
        Back to jobs
      </Link>
      
      <div className="card-subtle p-6 space-y-6">
        <div className="space-y-4">
          <div className="space-y-2">
            <h1 className="text-2xl font-medium text-slate-900">{job.title}</h1>
            <p className="text-lg text-emerald-600 font-medium">{job.company}</p>
          </div>
          
          <div className="flex flex-wrap items-center gap-3">
            <span className="job-type-badge">
              {job.type.replace('-', ' ')}
            </span>
            {job.salary && (
              <span className="salary-badge">
                {job.salary}
              </span>
            )}
            <span className="text-slate-500 text-sm">
              {job.location}
            </span>
            <span className="text-slate-400 text-sm">
              Posted {job.postedAt.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
            </span>
          </div>
        </div>

        <div className="space-y-6">
          <div className="space-y-3">
            <h2 className="text-lg font-medium text-slate-900">Description</h2>
            <p className="text-slate-700 leading-relaxed">{job.description}</p>
          </div>

          <div className="space-y-3">
            <h2 className="text-lg font-medium text-slate-900">Requirements</h2>
            <ul className="space-y-2">
              {job.requirements.map((req, index) => (
                <li key={index} className="text-slate-700 flex items-start">
                  <span className="mr-2">•</span>
                  <span>{req}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>

        <div className="bg-emerald-50 p-4 rounded-lg border border-emerald-100">
          <h3 className="font-medium text-slate-900 mb-2">How to Apply</h3>
          <p className="text-slate-600 text-sm mb-3">
            Send your application to: {job.email}
          </p>
          <a 
            href={`mailto:${job.email}`}
            className="btn-accent text-sm"
          >
            Apply via Email
          </a>
        </div>
      </div>
    </div>
  )
}


===== Q:\ZED\ZedBitBucket\jobboard\app\post-job\page.tsx =====
'use client'

import { useState } from 'react'
import { addJob } from '@/lib/jobs'
import { useRouter } from 'next/navigation'

export default function PostJob() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    title: '',
    company: '',
    location: '',
    type: 'full-time' as const,
    salary: '',
    description: '',
    requirements: '',
    email: ''
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const job = addJob({
      ...formData,
      requirements: formData.requirements.split('\n').filter(req => req.trim())
    });
    
    router.push(`/jobs/${job.id}`);
  };

  return (
    <div className="max-w-2xl mx-auto">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-light text-stone-900 mb-2">Post a Job</h1>
        <p className="text-stone-600">Find the perfect candidate for your team</p>
      </div>
      
      <form onSubmit={handleSubmit} className="card-subtle p-8 space-y-6">
        <div>
          <label className="block text-sm font-medium text-stone-700 mb-2">
            Job Title
          </label>
          <input
            type="text"
            required
            value={formData.title}
            onChange={(e) => setFormData({...formData, title: e.target.value})}
            className="input-field"
            placeholder="e.g., Senior Frontend Developer"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-stone-700 mb-2">
            Company
          </label>
          <input
            type="text"
            required
            value={formData.company}
            onChange={(e) => setFormData({...formData, company: e.target.value})}
            className="input-field"
            placeholder="e.g., Tech Solutions Ltd"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-stone-700 mb-2">
            Location
          </label>
          <input
            type="text"
            required
            value={formData.location}
            onChange={(e) => setFormData({...formData, location: e.target.value})}
            className="input-field"
            placeholder="e.g., Nairobi, Kenya"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-stone-700 mb-2">
            Job Type
          </label>
          <select
            value={formData.type}
            onChange={(e) => setFormData({...formData, type: e.target.value as any})}
            className="input-field"
          >
            <option value="full-time">Full Time</option>
            <option value="part-time">Part Time</option>
            <option value="contract">Contract</option>
            <option value="remote">Remote</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-stone-700 mb-2">
            Salary <span className="text-stone-500 font-normal">(Optional)</span>
          </label>
          <input
            type="text"
            value={formData.salary}
            onChange={(e) => setFormData({...formData, salary: e.target.value})}
            placeholder="e.g., KES 100,000 - 150,000"
            className="input-field"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-stone-700 mb-2">
            Job Description
          </label>
          <textarea
            required
            rows={5}
            value={formData.description}
            onChange={(e) => setFormData({...formData, description: e.target.value})}
            className="input-field resize-none"
            placeholder="Describe the role, responsibilities, and what makes this opportunity exciting..."
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-stone-700 mb-2">
            Requirements <span className="text-stone-500 font-normal">(one per line)</span>
          </label>
          <textarea
            required
            rows={4}
            value={formData.requirements}
            onChange={(e) => setFormData({...formData, requirements: e.target.value})}
            placeholder="3+ years experience&#10;React/Next.js&#10;TypeScript&#10;Strong communication skills"
            className="input-field resize-none"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-stone-700 mb-2">
            Contact Email
          </label>
          <input
            type="email"
            required
            value={formData.email}
            onChange={(e) => setFormData({...formData, email: e.target.value})}
            className="input-field"
            placeholder="hr@company.com"
          />
        </div>

        <button
          type="submit"
          className="w-full btn-accent py-3 font-medium"
        >
          Post Job
        </button>
      </form>
    </div>
  )
}


===== Q:\ZED\ZedBitBucket\jobboard\app\services\page.tsx =====
export default function Services() {
  const services = [
    {
      title: "Resume Writing",
      description: "Professional resume writing services to help you stand out from the competition.",
      features: [
        "ATS-optimized formatting",
        "Industry-specific keywords",
        "Professional review and editing",
        "Cover letter included"
      ],
      pricing: "Starting at KES 5,000",
      buttonText: "Get Started",
      color: "emerald"
    },
    {
      title: "Interview Coaching",
      description: "One-on-one interview coaching to boost your confidence and performance.",
      features: [
        "Mock interviews",
        "Behavioral question practice",
        "Technical interview prep",
        "Feedback and improvement tips"
      ],
      pricing: "KES 8,000 per session",
      buttonText: "Book Session",
      color: "blue"
    },
    {
      title: "Career Consultation",
      description: "Strategic career planning and guidance from industry experts.",
      features: [
        "Career path analysis",
        "Skills gap assessment",
        "Industry insights",
        "Networking strategies"
      ],
      pricing: "KES 10,000 per hour",
      buttonText: "Schedule Call",
      color: "purple"
    },
    {
      title: "HR Consulting",
      description: "Complete HR solutions for businesses of all sizes.",
      features: [
        "Recruitment process optimization",
        "Employee handbook creation",
        "Performance management systems",
        "Compliance and legal guidance"
      ],
      pricing: "Contact for pricing",
      buttonText: "Get Quote",
      color: "slate"
    }
  ];

  const getColorClasses = (color: string) => {
    const colorMap = {
      emerald: "from-emerald-50 to-emerald-100/50 border-emerald-200 text-emerald-700",
      blue: "from-blue-50 to-blue-100/50 border-blue-200 text-blue-700",
      purple: "from-purple-50 to-purple-100/50 border-purple-200 text-purple-700",
      slate: "from-slate-50 to-slate-100/50 border-slate-200 text-slate-700"
    };
    return colorMap[color as keyof typeof colorMap] || colorMap.slate;
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="text-center mb-12">
        <h1 className="text-3xl font-light text-slate-900 mb-4">
          HR <span className="text-emerald-600 font-medium">Services</span>
        </h1>
        <p className="text-slate-600 max-w-2xl mx-auto">
          Professional services to accelerate your career or streamline your hiring process
        </p>
      </div>
      
      <div className="grid gap-8 md:grid-cols-2">
        {services.map((service, index) => (
          <div key={index} className="card-subtle p-6 space-y-6 group hover:scale-[1.02] transition-transform duration-200">
            <div className="space-y-4">
              <div className={`w-12 h-12 rounded-xl bg-gradient-to-br ${getColorClasses(service.color)} flex items-center justify-center`}>
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  {index === 0 && (
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  )}
                  {index === 1 && (
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                  )}
                  {index === 2 && (
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                  )}
                  {index === 3 && (
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                  )}
                </svg>
              </div>
              
              <h2 className="text-xl font-semibold text-slate-900">{service.title}</h2>
              <p className="text-slate-600 text-sm leading-relaxed">
                {service.description}
              </p>
            </div>

            <ul className="space-y-2">
              {service.features.map((feature, featureIndex) => (
                <li key={featureIndex} className="text-sm text-slate-700 flex items-start">
                  <div className="w-1.5 h-1.5 bg-emerald-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>{feature}</span>
                </li>
              ))}
            </ul>

            <div className="pt-4 space-y-4 border-t border-slate-100">
              <div className="text-slate-900 font-semibold text-lg">
                {service.pricing}
              </div>
              <button className="w-full btn-primary font-semibold">
                {service.buttonText}
              </button>
            </div>
          </div>
        ))}
      </div>

      <div className="mt-16 text-center">
        <div className="card-subtle p-8 bg-gradient-to-r from-emerald-50 to-sage-50 border-emerald-100">
          <h3 className="text-xl font-semibold text-slate-900 mb-3">
            Need a Custom Solution?
          </h3>
          <p className="text-slate-600 mb-6">
            Let's discuss how we can help you achieve your HR goals
          </p>
          <button className="btn-accent">
            Contact Us Today
          </button>
        </div>
      </div>
    </div>
  )
}

This is my job board application in its initial steps. I don't wanna have hardcoded data anymore. I wanna have data pulled from a postgres db. 
Full code. Keep it short and sweet. 